#set( $ContextPath = ${request.contextPath} )

<!DOCTYPE html>
<html>
<head>
<title>WebSocket/SockJS Echo Sample (Adapted from Tomcat's echo sample)</title>
<style type="text/css">
#connect-container {
	float: left;
	width: 400px
}

#connect-container div {
	padding: 5px;
}

#console-container {
	float: left;
	margin-left: 15px;
	width: 400px;
}

#img-container div {
	padding: 15px;
}

#img-container {
	float: left;
	margin-left: 30px;
	width: 400px;
}

#console {
	border: 1px solid #CCCCCC;
	border-right-color: #999999;
	border-bottom-color: #999999;
	height: 170px;
	overflow-y: scroll;
	padding: 5px;
	width: 100%;
}

#console p {
	padding: 0;
	margin: 0;
}
</style>

<script type="text/javascript" src="${ContextPath}/resources/sockjs-0.3.min.js"></script>
<script type="text/javascript" src="${ContextPath}/resources/jquery-1.11.2.min.js"></script>
<script type="text/javascript">
	var ws = null;
	var url = '${ContextPath}/web/websocket';
	var transports = [];
	
	var queue = new Array();
	var isReady = false;
		
    function setConnected(connected) {
    
        document.getElementById('connect').disabled = connected;
        document.getElementById('disconnect').disabled = !connected;
        document.getElementById('echo').disabled = !connected;
    }
      
	function connect() {
		
		console.log("url:"+url);
		if (!url) {
			alert('Select whether to use W3C WebSocket or SockJS');
			return;
		}  
      
		ws = (url.indexOf('sockjs') != -1) ? new SockJS(url, undefined, {protocols_whitelist: transports}) : new WebSocket(url);  
      
		ws.onopen = function () {
		
			setConnected(true);
			log('Info: connection opened.');
			imReady();
		};  
		
		ws.onmessage = function (event) {
			
			var json = JSON.parse(event.data);
			console.log(json);
			
			if(json.category == 'MESSAGE')
				log('Received: ' + json.content);
			if(json.category == 'CAPTCHA'){
				
				queue.push(json);
				if(isReady){
					isReady = false;
					var captcha = queue.shift();
					renderCaptcha(captcha);
				}
				$("#QUEUE").html(queue.length);
			}
		};  

		ws.onclose = function (event) {
			setConnected(false);
			log('Info: connection closed.');
			log(event);
		};  
	}  
      
	function disconnect() {
		if (ws != null) {
			ws.close();
			ws = null;
		}
		setConnected(false);
	}  
      
	function echo() {
		
		if (ws != null) {
			var message = {
				'content' : $('#message').val(),
				'category': 'MESSAGE'
			};
			log('Sent: ' + JSON.stringify(message))
			ws.send(JSON.stringify(message))
		} else {
			alert('connection not established, please connect.');
		}
	}
	
	function renderCaptcha(captcha){
	
		$('#uid').html(captcha.uid);
		$('#captcha').attr('src', 'data:image/jpeg;base64,' + captcha.captcha);
		$('#tip').attr('src', 'data:image/jpeg;base64,' + captcha.tip);
		$('#inputCaptcha').val("").focus();
	}
	
	function imReady(){
	
		if (ws != null) {
		
			isReady = true;
			if(queue.length > 0){
				isReady = false;
				var captcha = queue.shift();
				renderCaptcha(captcha);
				
			} else {
			
				$("#uid").html("");
				$("#captcha").attr("src","");
				$("#tip").attr("src",""); 
				$("#inputCaptcha").val("");
				var ack = { "category":"READY", "user":"${USER}" };
				ws.send(JSON.stringify(ack));
			}
			$("#QUEUE").html(queue.length);
		} else {
			alert('connection not established, please connect.');
		}
	}
      
    function updateUrl(urlPath) {  
    
        if (urlPath.indexOf('sockjs') != -1) {
          
            url = urlPath;  
            document.getElementById('sockJsTransportSelect').style.visibility = 'visible';  
        } else {
          
          if (window.location.protocol == 'http:') {  
              url = 'ws://' + window.location.host + urlPath;  
          } else {  
              url = 'wss://' + window.location.host + urlPath;  
          }  
          document.getElementById('sockJsTransportSelect').style.visibility = 'hidden';  
        }  
    }  
      
    function updateTransport(transport) {
    	alert(transport);
    	transports = (transport == 'all') ?  [] : [transport];  
    }  
      
    function log(message) {  
        var console = document.getElementById('console');  
        var p = document.createElement('p');  
        p.style.wordWrap = 'break-word';  
        p.appendChild(document.createTextNode(message));  
        console.appendChild(p);  
        while (console.childNodes.length > 25) {  
            console.removeChild(console.firstChild);  
        }  
        console.scrollTop = console.scrollHeight;  
    }
    
    $(function(){
    
    	if (window.location.protocol == 'http:') {
    		url = 'ws://' + window.location.host + url;
    	} else {
    		url = 'wss://' + window.location.host + url;
    	}
          
    	$('#inputCaptcha').keydown(function(event) {

		    if((event.keyCode >= 48 && event.keyCode <= 57)
		    	|| (event.keyCode >=96 && event.keyCode <=105) 
		    	|| event.keyCode == 8 || event.keyCode == 46 || event.keyCode == 39 || event.keyCode == 37)
		    	;
		    else if (event.keyCode == 32 || event.keyCode == 13){
		    
		    	event.preventDefault();
		    	var uid = $('#uid').html();
	        	$.ajax({
					url  : "${ContextPath}/web/home/response/" + uid,
					type : 'POST',
					data : $('#inputCaptcha').val(),
					contentType: 'application/json; charset=utf-8',
					success: function(json) { 
						
						console.log("success");
						imReady();
					},
		            error: function(msg) { console.log("error"); }
				});
		    }
		});
    });
</script>
</head>
<body>
	<noscript>
		<h2 style="color: #ff0000">Seems your browser doesn't support
			Javascript! Websockets rely on Javascript being enabled. Please
			enable Javascript and reload this page!</h2>
	</noscript>
	<div>
		<div id="connect-container">
			<input id="radio1" type="radio" name="group1" onclick="updateUrl('${ContextPath}/web/websocket');">
			<label for="radio1">W3C WebSocket</label><br/>
			<input id="radio2" checked type="radio" name="group1" onclick="updateUrl('${ContextPath}/web/websocket');">
			<label for="radio2">SockJS</label>
			<div id="sockJsTransportSelect" style="visibility: hidden;">
				<span>SockJS transport:</span>
				<select onchange="updateTransport(this.value)">
					<option value="all">all</option>
					<option value="websocket">websocket</option>
					<option value="xhr-polling">xhr-polling</option>
					<option value="jsonp-polling">jsonp-polling</option>
					<option value="xhr-streaming">xhr-streaming</option>
					<option value="iframe-eventsource">iframe-eventsource</option>
					<option value="iframe-htmlfile">iframe-htmlfile</option>
				</select>
			</div>
			<div>
				<button id="connect" onclick="connect();">Connect</button>
				<button id="disconnect" disabled="disabled" onclick="disconnect();">Disconnect</button>
			</div>
			<div>
				<textarea id="message" style="width: 350px">Here is a message!</textarea>
			</div>
			<div>
				<button id="echo" onclick="echo();" disabled="disabled">Echo message</button>
			</div>
		</div>
		<div id="console-container">
			<div id="console"></div>
		</div>
		<div id="img-container">
			QUEUE:[<label id='QUEUE'>0</label>]<br/>
			FROM:<label id="uid"></label><br/>
			<img id="captcha" alt="验证码图片在此"/><br/>
			<img id="tip" alt="正在获取验证码..."/><br/>
			<input type="text" id="inputCaptcha"/>
		</div>
	</div>
</body>
</html>